buildscript {
    repositories {
        mavenLocal()
        if (project.hasProperty('localNexus')) {
            maven {
                url "${localNexus}"
                allowInsecureProtocol = true
            }
        } else {
            mavenCentral()
        }
    }

    dependencies {
        classpath 'fincher.java.eclipse:fincher.java.eclipse.gradle.plugin:0.0.3'
        classpath 'fincher.java.checkstyle:fincher.java.checkstyle.gradle.plugin:0.0.1'
    }
}


plugins {
    id 'java'
    id 'maven-publish'
    id "org.sonarqube" version "2.8"
    id 'jacoco'
    id "net.researchgate.release" version "2.6.0"
}

apply plugin: com.fincher.gradle.eclipse.EclipseSettings
apply plugin: com.fincher.gradle.checkstyle.CheckstyleConfigPlugin

group = 'com.fincher'
description = 'Input / Output channels'
sourceCompatibility = 1.17
targetCompatibility = 1.17

repositories {
    mavenLocal()
    if (project.hasProperty('localNexus')) {
        maven {
            url "${localNexus}"
            allowInsecureProtocol = true
        }
    } else {
        mavenCentral()
    }
}

dependencies {
    implementation 'com.fincher:java-thread:3.0.0'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.mockito:mockito-core:4.4.0'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required=true
    }
}

test.finalizedBy jacocoTestReport

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set("sources")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
	        from components.java
	        artifact tasks.sourcesJar
	    }
    }

    repositories {
        maven {
            credentials {
                username = "${publishUsername}"
                password = "${publishPassword}"
            }
		
            if (project.version.endsWith('-SNAPSHOT')) {
                url "${publishSnapshotUrl}"
            } else {
                url "${publishReleaseUrl}repositories/releases"
            }

            allowInsecureProtocol = true

            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

tasks.checkstyleMain.dependsOn("copyCheckstyleConfig")

checkstyle {
    configDirectory = "${buildDir}/generated/checkstyleConfig" as File
}

release {
    git {
        requireBranch = ''
    }
}
